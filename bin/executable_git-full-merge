#!/bin/sh
set -e
if [ -z "$@" ]; then
    echo "No branches to merge"
    exit 2
fi

# Find current branch and merge base
CURRENT_BRANCH=$(git branch --show-current)
if [ -z $CURRENT_BRANCH ]; then
    echo "Not on a branch"
    exit 2
fi
MERGE_BASE=$(git merge-base $CURRENT_BRANCH "$@")

# Check if there are fixup commits in branches.
for BRANCH in "$@"; do
    (git log $CURRENT_BRANCH..$BRANCH --pretty="%s") | while read LINE; do
        case $LINE in fixup!*)
            echo "Fixup in branch $BRANCH"
            exit 2
        esac
    done
done

# Merge
echo "###" Will run: git merge --no-edit "$@"
git merge --no-edit "$@"

# Confirm the merged status
# XXX: Fails if master is at the initial commit
echo "###" Will run git graph ${MERGE_BASE}^..${CURRENT_BRANCH}
git graph ${MERGE_BASE}^..${CURRENT_BRANCH}
echo Push?
# Wait for enter
read DUMMY

# Push
echo "###" Will run git push origin $CURRENT_BRANCH
git push origin $CURRENT_BRANCH

# Wait for the repo to process the merge before deleting the branches
sleep 1

# Delete local branched from remote
LOCAL_BRANCHES=$(git branch --list "$@" --format='%(refname:short)')
if [ -n "$LOCAL_BRANCHES" ]; then
    echo "###" Will run git push origin --delete $LOCAL_BRANCHES
    git push origin --delete $LOCAL_BRANCHES
fi
# Delete remote branches
REMOTE_BRANCHES=$(git branch --list --remotes "$@" --format='%(refname:lstrip=-1)')
if [ -n "$REMOTE_BRANCHES" ]; then
    echo "###" Will run git push origin --delete $REMOTE_BRANCHES
    git push origin --delete $REMOTE_BRANCHES
fi
# Delete local branches from local repo
if [ -n "$LOCAL_BRANCHES" ]; then
    echo "###" Will run git branch --delete $LOCAL_BRANCHES
    git branch --delete $LOCAL_BRANCHES
fi
